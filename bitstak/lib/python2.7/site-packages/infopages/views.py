from models import InfoPage
from django.template import loader, RequestContext
from django.shortcuts import get_object_or_404
from django.http import HttpResponse, HttpResponseRedirect
from django.conf import settings
from django.core.xheaders import populate_xheaders
from django.db.models import Q
from django.utils.safestring import mark_safe

DEFAULT_TEMPLATE = 'infopages/default.html'

def infopage(request, url):
    """
    Info page view
    """
    if not url.endswith('/') and settings.APPEND_SLASH:
        return HttpResponseRedirect("%s/" % request.path)
    if not url.startswith('/'):
        url = "/" + url
    print url.replace(InfoPage.DELIMETER,"/").rstrip("/").lstrip("/")
    f = get_object_or_404(InfoPage, Q( url__exact=url ) | Q( path__exact=InfoPage.DELIMETER.join([ s for s in url.split("/") if len(s)]) ), sites__id__exact=settings.SITE_ID)

    # If registration is required for accessing this page, and the user isn't
    # logged in, redirect to the login page.
    if f.registration_required and not request.user.is_authenticated():
        from django.contrib.auth.views import redirect_to_login
        return redirect_to_login(request.path)
    if f.template_name:
        t = loader.select_template((f.template_name, DEFAULT_TEMPLATE))
    else:
        t = loader.get_template(DEFAULT_TEMPLATE)

    c = RequestContext(request, {
        'infopage': f,
    })
    response = HttpResponse(t.render(c))
    populate_xheaders(request, response, InfoPage, f.id)
    return response


